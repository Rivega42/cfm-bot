{
  "name": "CFM.2 Registration Flow",
  "nodes": [
    {
      "parameters": {
        "path": "cfm-registration",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-registration",
      "name": "Registration Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [250, 300],
      "typeVersion": 1.1,
      "webhookId": "cfm-registration-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse incoming registration request\nconst input = $input.all()[0].json;\n\nlet registrationData = {\n  userId: input.userId || input.body?.userId,\n  chatId: input.chatId || input.body?.chatId,\n  telegram_id: input.telegram_id || input.body?.telegram_id,\n  step: input.step || input.body?.step || 'welcome',\n  userInput: input.userInput || input.body?.userInput || null,\n  sessionData: input.sessionData || input.body?.sessionData || {},\n  messageId: input.messageId || input.body?.messageId || null,\n  isCallback: input.isCallback || input.body?.isCallback || false,\n  callbackId: input.callbackId || input.body?.callbackId || null\n};\n\nconsole.log('Registration request:', registrationData);\nreturn [{json: registrationData}];"
      },
      "id": "parse-request",
      "name": "Parse Request",
      "type": "n8n-nodes-base.code",
      "position": [450, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get user profile data\nSELECT \n    u.id as user_id,\n    u.telegram_id,\n    u.username,\n    u.first_name,\n    u.last_name,\n    u.email,\n    u.phone,\n    u.profile_completed,\n    u.onboarding_step,\n    u.state,\n    p.bio,\n    p.location,\n    p.skills,\n    p.interests,\n    p.experience_years,\n    p.looking_for,\n    p.availability,\n    p.linkedin_url,\n    p.website_url,\n    s.session_data,\n    s.current_step\nFROM users u\nLEFT JOIN user_profiles p ON u.id = p.user_id\nLEFT JOIN user_sessions s ON u.id = s.user_id AND s.is_active = true\nWHERE u.telegram_id = '{{$json[\"telegram_id\"]}}'",
        "options": {}
      },
      "id": "get-user-profile",
      "name": "Get User Profile",
      "type": "n8n-nodes-base.postgres",
      "position": [650, 300],
      "typeVersion": 2.4,
      "credentials": {
        "postgres": {
          "id": "hnd3TKy4nWjWuRGC",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Registration steps handler with validation\nconst request = $node[\"Parse Request\"].json;\nconst userData = $input.all()[0].json;\n\nlet response = {\n  chatId: request.chatId,\n  messageId: request.messageId,\n  step: request.step,\n  telegram_id: request.telegram_id\n};\n\n// Registration steps configuration\nconst STEPS = {\n  welcome: {\n    message: \"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\\n\\nüìù –°–µ–π—á–∞—Å –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞.\\n\\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞.\\n\\nüìä –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å:\\n‚Ä¢ –û—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\\n‚Ä¢ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\\n\\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\",\n    keyboard: {\n      inline_keyboard: [\n        [{text: \"üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\", callback_data: \"reg_start\"}],\n        [{text: \"üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ\", callback_data: \"reg_info\"}],\n        [{text: \"üîô –í–µ—Ä–Ω—É—Ç—å—Å—è\", callback_data: \"back_to_menu\"}]\n      ]\n    },\n    nextStep: \"first_name\",\n    skipValidation: true\n  },\n  \n  first_name: {\n    message: \"üìù –®–∞–≥ 1/8: –í–∞—à–µ –∏–º—è\\n\\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):\",\n    validation: {\n      required: true,\n      minLength: 2,\n      maxLength: 50,\n      pattern: /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\\s-]+$/\n    },\n    errorMessage: \"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\",\n    nextStep: \"last_name\",\n    field: \"first_name\"\n  },\n  \n  last_name: {\n    message: \"üìù –®–∞–≥ 2/8: –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è\\n\\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:\",\n    validation: {\n      required: true,\n      minLength: 2,\n      maxLength: 50,\n      pattern: /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\\s-]+$/\n    },\n    errorMessage: \"‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\",\n    nextStep: \"email\",\n    field: \"last_name\"\n  },\n  \n  email: {\n    message: \"üìß –®–∞–≥ 3/8: Email\\n\\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏:\\n\\nüí° –ù–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Ç—á–µ–π\",\n    validation: {\n      required: true,\n      pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    },\n    errorMessage: \"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å\",\n    nextStep: \"phone\",\n    field: \"email\"\n  },\n  \n  phone: {\n    message: \"üì± –®–∞–≥ 4/8: –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\\n\\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':\",\n    keyboard: {\n      inline_keyboard: [\n        [{text: \"‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\", callback_data: \"skip_phone\"}]\n      ]\n    },\n    validation: {\n      required: false,\n      pattern: /^[\\d+\\s()\\-]+$/\n    },\n    errorMessage: \"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞\",\n    nextStep: \"location\",\n    field: \"phone\"\n  },\n  \n  location: {\n    message: \"üìç –®–∞–≥ 5/8: –õ–æ–∫–∞—Ü–∏—è\\n\\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:\\n\\nüí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–æ–≤ —Ä—è–¥–æ–º\",\n    validation: {\n      required: true,\n      minLength: 2\n    },\n    errorMessage: \"‚ùå –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)\",\n    nextStep: \"experience\",\n    field: \"location\"\n  },\n  \n  experience: {\n    message: \"üíº –®–∞–≥ 6/8: –û–ø—ã—Ç\\n\\n–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –±–∏–∑–Ω–µ—Å–µ/—Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö?\",\n    keyboard: {\n      inline_keyboard: [\n        [{text: \"0-1 –≥–æ–¥\", callback_data: \"exp_0-1\"}],\n        [{text: \"2-3 –≥–æ–¥–∞\", callback_data: \"exp_2-3\"}],\n        [{text: \"4-5 –ª–µ—Ç\", callback_data: \"exp_4-5\"}],\n        [{text: \"6-10 –ª–µ—Ç\", callback_data: \"exp_6-10\"}],\n        [{text: \"10+ –ª–µ—Ç\", callback_data: \"exp_10+\"}]\n      ]\n    },\n    nextStep: \"bio\",\n    field: \"experience_years\",\n    mapCallback: {\n      \"exp_0-1\": \"0-1\",\n      \"exp_2-3\": \"2-3\",\n      \"exp_4-5\": \"4-5\",\n      \"exp_6-10\": \"6-10\",\n      \"exp_10+\": \"10+\"\n    }\n  },\n  \n  bio: {\n    message: \"‚úçÔ∏è –®–∞–≥ 7/8: –û —Å–µ–±–µ\\n\\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):\\n\\nüí° –ß—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ? –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–µ–ª–∞–ª–∏?\",\n    validation: {\n      required: true,\n      minLength: 20,\n      maxLength: 500\n    },\n    errorMessage: \"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 20 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤\",\n    nextStep: \"looking_for\",\n    field: \"bio\"\n  },\n  \n  looking_for: {\n    message: \"üéØ –®–∞–≥ 8/8: –ö–æ–≥–æ –∏—â–µ—Ç–µ?\\n\\n–ö–∞–∫–æ–≥–æ –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞ –≤—ã –∏—â–µ—Ç–µ?\",\n    keyboard: {\n      inline_keyboard: [\n        [{text: \"üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π (CTO)\", callback_data: \"lf_tech\"}],\n        [{text: \"üíº –ë–∏–∑–Ω–µ—Å (CEO/COO)\", callback_data: \"lf_business\"}],\n        [{text: \"üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (CMO)\", callback_data: \"lf_marketing\"}],\n        [{text: \"üí∞ –§–∏–Ω–∞–Ω—Å—ã (CFO)\", callback_data: \"lf_finance\"}],\n        [{text: \"üé® –î–∏–∑–∞–π–Ω/–ü—Ä–æ–¥—É–∫—Ç\", callback_data: \"lf_design\"}],\n        [{text: \"ü§ù –õ—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π\", callback_data: \"lf_any\"}]\n      ]\n    },\n    nextStep: \"complete\",\n    field: \"looking_for\",\n    mapCallback: {\n      \"lf_tech\": \"Technical (CTO)\",\n      \"lf_business\": \"Business (CEO/COO)\",\n      \"lf_marketing\": \"Marketing (CMO)\",\n      \"lf_finance\": \"Finance (CFO)\",\n      \"lf_design\": \"Design/Product\",\n      \"lf_any\": \"Any suitable\"\n    }\n  },\n  \n  complete: {\n    message: \"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω!\\n\\nüìä –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞.\\n\\nüí° 40 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é 85%+\",\n    keyboard: {\n      inline_keyboard: [\n        [{text: \"üöÄ –ù–∞—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\", callback_data: \"start_questions\"}],\n        [{text: \"üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\", callback_data: \"view_profile\"}],\n        [{text: \"üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\", callback_data: \"main_menu\"}]\n      ]\n    },\n    skipValidation: true\n  }\n};\n\n// Get current step config\nconst currentStep = STEPS[request.step] || STEPS.welcome;\n\n// Handle user input if provided\nif (request.userInput && !currentStep.skipValidation) {\n  // Check if it's a callback\n  if (request.isCallback && currentStep.mapCallback) {\n    const mappedValue = currentStep.mapCallback[request.userInput];\n    if (mappedValue) {\n      response.fieldToSave = currentStep.field;\n      response.valueToSave = mappedValue;\n      response.moveToNext = true;\n      response.nextStep = currentStep.nextStep;\n    }\n  } \n  // Check for skip action\n  else if (request.userInput === 'skip_phone' && request.step === 'phone') {\n    response.moveToNext = true;\n    response.nextStep = currentStep.nextStep;\n  }\n  // Validate text input\n  else if (currentStep.validation && !request.isCallback) {\n    const validation = currentStep.validation;\n    const input = request.userInput.trim();\n    \n    let isValid = true;\n    let errorMsg = currentStep.errorMessage;\n    \n    // Check required\n    if (validation.required && !input) {\n      isValid = false;\n      errorMsg = \"‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\";\n    }\n    \n    // Check length\n    if (isValid && validation.minLength && input.length < validation.minLength) {\n      isValid = false;\n    }\n    if (isValid && validation.maxLength && input.length > validation.maxLength) {\n      isValid = false;\n    }\n    \n    // Check pattern\n    if (isValid && validation.pattern && !validation.pattern.test(input)) {\n      isValid = false;\n    }\n    \n    if (isValid) {\n      response.fieldToSave = currentStep.field;\n      response.valueToSave = input;\n      response.moveToNext = true;\n      response.nextStep = currentStep.nextStep;\n    } else {\n      response.validationError = true;\n      response.errorMessage = errorMsg + \"\\n\\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\";\n    }\n  }\n}\n\n// Prepare response message\nif (response.validationError) {\n  response.message = response.errorMessage;\n  response.keyboard = currentStep.keyboard;\n} else if (response.moveToNext && response.nextStep) {\n  const nextStepConfig = STEPS[response.nextStep];\n  response.message = nextStepConfig.message;\n  response.keyboard = nextStepConfig.keyboard;\n  response.currentStep = response.nextStep;\n} else {\n  response.message = currentStep.message;\n  response.keyboard = currentStep.keyboard;\n  response.currentStep = request.step;\n}\n\n// Add progress indicator\nif (response.currentStep && response.currentStep !== 'welcome' && response.currentStep !== 'complete') {\n  const stepNumber = Object.keys(STEPS).indexOf(response.currentStep);\n  const totalSteps = Object.keys(STEPS).length - 2; // Exclude welcome and complete\n  const progress = Math.round((stepNumber / totalSteps) * 100);\n  response.message = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%\\n\\n` + response.message;\n}\n\nconsole.log('Registration response:', response);\nreturn [{json: response}];"
      },
      "id": "registration-handler",
      "name": "Registration Handler",
      "type": "n8n-nodes-base.code",
      "position": [850, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"fieldToSave\"] !== undefined}}",
              "value2": true
            }
          ]
        }
      },
      "id": "should-save",
      "name": "Should Save?",
      "type": "n8n-nodes-base.if",
      "position": [1050, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update user profile fields dynamically\n{{ $json.fieldToSave === 'first_name' || $json.fieldToSave === 'last_name' || $json.fieldToSave === 'email' || $json.fieldToSave === 'phone' ? \n`UPDATE users \nSET ${$json.fieldToSave} = '${$json.valueToSave}',\n    last_active = CURRENT_TIMESTAMP\nWHERE telegram_id = '${$json.telegram_id}';\n\nSELECT 'User info updated' as status;`\n:\n`-- Ensure profile exists\nINSERT INTO user_profiles (user_id, ${$json.fieldToSave}, updated_at)\nSELECT id, '${$json.valueToSave}', CURRENT_TIMESTAMP\nFROM users\nWHERE telegram_id = '${$json.telegram_id}'\nON CONFLICT (user_id) \nDO UPDATE SET \n    ${$json.fieldToSave} = '${$json.valueToSave}',\n    updated_at = CURRENT_TIMESTAMP;\n\nSELECT 'Profile updated' as status;`\n}}",
        "options": {}
      },
      "id": "save-profile-field",
      "name": "Save Profile Field",
      "type": "n8n-nodes-base.postgres",
      "position": [1250, 250],
      "typeVersion": 2.4,
      "credentials": {
        "postgres": {
          "id": "hnd3TKy4nWjWuRGC",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Registration Handler\"].json.currentStep}}",
              "operation": "equals",
              "value2": "complete"
            }
          ]
        }
      },
      "id": "is-complete",
      "name": "Is Complete?",
      "type": "n8n-nodes-base.if",
      "position": [1450, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Mark profile as completed\nUPDATE users \nSET profile_completed = true,\n    state = 'registered',\n    onboarding_step = 0,\n    last_active = CURRENT_TIMESTAMP\nWHERE telegram_id = '{{$node[\"Registration Handler\"].json.telegram_id}}';\n\n-- Update session to questions flow\nUPDATE user_sessions \nSET current_step = 'questions_batch_1',\n    session_data = jsonb_set(\n        COALESCE(session_data, '{}'),\n        '{registration_completed}',\n        'true'\n    )\nWHERE user_id = (SELECT id FROM users WHERE telegram_id = '{{$node[\"Registration Handler\"].json.telegram_id}}')\n  AND is_active = true;\n\nSELECT 'Profile completed' as status;",
        "options": {}
      },
      "id": "mark-complete",
      "name": "Mark Complete",
      "type": "n8n-nodes-base.postgres",
      "position": [1650, 250],
      "typeVersion": 2.4,
      "credentials": {
        "postgres": {
          "id": "hnd3TKy4nWjWuRGC",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare response for main bot\nconst handler = $node[\"Registration Handler\"].json;\nconst isComplete = handler.currentStep === 'complete';\n\nlet response = {\n  success: true,\n  chatId: handler.chatId,\n  message: handler.message,\n  keyboard: handler.keyboard,\n  currentStep: handler.currentStep,\n  isComplete: isComplete,\n  editMessage: handler.messageId ? true : false,\n  messageId: handler.messageId\n};\n\nif (isComplete) {\n  response.action = 'registration_complete';\n  response.triggerNext = 'questions_flow';\n}\n\nreturn [{json: response}];"
      },
      "id": "prepare-response",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "position": [1850, 300],
      "typeVersion": 2
    }
  ],
  "connections": {
    "Registration Webhook": {
      "main": [[{"node": "Parse Request", "type": "main", "index": 0}]]
    },
    "Parse Request": {
      "main": [[{"node": "Get User Profile", "type": "main", "index": 0}]]
    },
    "Get User Profile": {
      "main": [[{"node": "Registration Handler", "type": "main", "index": 0}]]
    },
    "Registration Handler": {
      "main": [[{"node": "Should Save?", "type": "main", "index": 0}]]
    },
    "Should Save?": {
      "main": [
        [{"node": "Save Profile Field", "type": "main", "index": 0}],
        [{"node": "Is Complete?", "type": "main", "index": 0}]
      ]
    },
    "Save Profile Field": {
      "main": [[{"node": "Is Complete?", "type": "main", "index": 0}]]
    },
    "Is Complete?": {
      "main": [
        [{"node": "Mark Complete", "type": "main", "index": 0}],
        [{"node": "Prepare Response", "type": "main", "index": 0}]
      ]
    },
    "Mark Complete": {
      "main": [[{"node": "Prepare Response", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "meta": {
    "instanceId": "cfm-registration-flow"
  }
}